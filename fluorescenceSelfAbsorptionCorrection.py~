import h5py
import numpy as np
from matplotlib import pyplot as plt
from scipy import math
import cv2
import json
import tomopy

  
class material(object):
    def __init__(self, name,density):
        self.name=name
        self.density=density
        print 'class defining material'
    	#name =''
    	self.keys=['material', 'massAbsCoef']
    	self.myDictionary=dict()#dict.fromkeys(keys, None))
    
    #def setName(self,materialName):
    #    self.name=materialName
    def readName(self):
        print 'material name:',self.name  
    def setPathToProjections(self,path):
        self.pathToProjections=path
        
class processingTools():
    def __init__(self):
        print 'defining tool'
        
class materialProjectionsTomo(object):
    def __init__(self, name,pathToProjection):
        self.name=name
        print 'class defining material'
        #self.projections=pathToProjection
        self.path=pathToProjection
    def set_projection(self,projection):
        self.projection=projection
    def set_materialTomo(self,tomo):    #self.tomo=np.zeros([angles,width,width])
        self.tomo=tomo
    
def tomography(nxsfileName,dataFolder,centre,nTheta,angleRange): 
    print 'file containing projections',nxsfileName 
    mypath=h5py.File(nxsfileName,'r') 
    theta=tomopy.angles(nTheta, 0.0, angleRange)
    print 'angles', theta    
    print 'looking for "',dataFolder, '" in the tree...'
    contLoop=True
    pathTot=''
    mycent=centre#32 for Cu and Pt
    contLoop, pathToData, pathTot=myRec(mypath,contLoop,pathTot,dataFolder)
    print pathTot
    if not contLoop:
        print 'database "',dataFolder,'" found in  ', pathTot
        
        data=mypath[str(pathTot)]
        npdata=np.array(data[0:nTheta][:][:])
        print npdata.shape
        a,b,c=npdata.shape
        
        print a,b,c, ' file images to analyse' 
        #plt.imshow(npdata[:,1,:])
        #plt.show()
        
        rec = tomopy.recon(npdata, theta, mycent, algorithm='ospml_hybrid', num_iter=100)#'osem', num_iter=100)#algorithm='gridrec'
        #Fig1=plt.figure(1)
        #plt.imshow(rec[1][:][:],cmap='Greys_r')
        
        print 'reconstruction done! this is the shape of the reconstructed object:', np.shape(rec)
        #plt.show()
	
        return rec
    else:
        print 'database "', dataFolder,'" not found!'   
  
def absTomography(nxsfileName,dataFolder,centre,nTheta,angleRange,roi):
    print 'file containing projections',nxsfileName 
    mypath=h5py.File(nxsfileName,'r') 
    theta=tomopy.angles(nTheta, 0.0, angleRange)
    print 'angles', theta    
    print 'looking for "',dataFolder, '" in the tree...'
    contLoop=True
    pathTot=''
    mycent=centre#32 for Cu and Pt
    contLoop, pathToData, pathTot=myRec(mypath,contLoop,pathTot,dataFolder)
    print pathTot
    if not contLoop:
        print 'database "',dataFolder,'" found in  ', pathTot
        
        data=mypath[str(pathTot)]
        npdata=np.array(data[0:nTheta][:][:])
        print npdata.shape
        a,b,c=npdata.shape
        print a,b,c, ' file images to analyse' 
        #plt.imshow(npdata[0,:,:])
        #plt.show()
        npdata=tomopy.normalize_roi(npdata,roi)
	#plt.imshow(npdata[0,:,:])
	#plt.show()
        npdata=tomopy.minus_log(npdata)
	#plt.imshow(npdata[0,:,:])
	#plt.show()
        rec = tomopy.recon(npdata, theta, mycent, algorithm='ospml_hybrid', num_iter=100)#'osem', num_iter=100)#algorithm='gridrec'
        #Fig1=plt.figure(1)
        #plt.imshow(rec[4][:][:],cmap='Greys_r')
        print 'reconstruction done! this is the shape of the reconstructed object:', np.shape(rec)
        #plt.show()
        return rec
    else:
        print 'database "', dataFolder,'" not found!'
          
def AttenuationCorrection(listOfMaterials,outFold, absTomo,dataFolder,tomoCentre,minFluoSignal,projShift,numAngle,angleRange,pixelSize):


 
        tomoMerlin=absTomo     
        print 'loading materials'
        print len(listOfMaterials)
        materialsAnalysis=[]
        print 'loading data...'
        
        for i in range(len(listOfMaterials)):
            print 'Im happy here'
            name=listOfMaterials[i]
            temp=materialProjectionsTomo(listOfMaterials[i].name,listOfMaterials[i].pathToProjections)
            contLoop=True
            pathTot=''
            print 'path to projections', listOfMaterials[i].pathToProjections
            mypathTemp=h5py.File(temp.path,'r') 
            contLoop, pathToData, pathTot=myRec(mypathTemp,contLoop,pathTot,dataFolder)
	    print pathTot, 'pahtTot'
            try:
                print np.shape(np.array(mypathTemp[str(pathTot)]))
                temp.set_projection(np.array(mypathTemp[str(pathTot)]))
		print 'projection set'
                materialsAnalysis.append(temp)
		print 'projection append'
		tempTomo=tomography(materialsAnalysis[i].path,dataFolder, tomoCentre,numAngle,angleRange)
                materialsAnalysis[i].set_materialTomo(tempTomo)
                print materialsAnalysis[i].name, 'loaded'
                #plt.imshow(materialsAnalysis[i].tomo[1,:,:])
                #plt.show()
                #raw_input("Press Enter to continue...")   
            except:
                print 'data', listOfMaterials[i].pathToProjections, 'not found! closing'
            
        #raw_input("Press Enter to continue...")       
            #materialsAnalysis.append(materialProjectionsTomo())
            #materialsAnalysis=[]
        #npdataPt=np.array(mypathPt[str(pathTot)])
            
            
        #raw_input("Press Enter to continue...")    
        '''
        STEP 1:
        do the tomography with the acquired sinograms
        '''
        testIteration=0
        NewMaterials = [None] * len(listOfMaterials)
        MaterialsCorrection = [None] * len(listOfMaterials)
        MaterialDensity = [None] * len(listOfMaterials)
        while testIteration<10:
            testIteration+=1
            print 'iteration', testIteration
            npdataMerlin=np.array(tomoMerlin)

            nAngles=0
            height=0
            width=0
            print np.shape(tomoMerlin), 'shape'
            SumTotTomo=np.zeros(np.shape(tomoMerlin))
            for nMat in range (len(listOfMaterials)):
                print np.shape(materialsAnalysis[nMat].tomo)
                SumTotTomo+=materialsAnalysis[nMat].tomo
                nAngles,height,width=np.shape(materialsAnalysis[nMat].projection)
                NewMaterials[nMat]=np.zeros([nAngles,height,width])
                NewMaterials[nMat][:,:,0]=materialsAnalysis[nMat].projection[:,:,0]
                MaterialsCorrection[nMat]=np.ones((nAngles,height,width,width))
            print 'tomography done, now Calculated Densities'    
            print 'VALUE',materialsAnalysis[2].tomo[4,4,4]
            materialRatio=[None]*len(listOfMaterials)
            materialEffectiveDensity=[None]*height
            for heightIndex in range(height):
                effDens=np.zeros([width,width,len(listOfMaterials)])
                for firstIndex in range(width):
                    for secondIndex in range(width):
                        sum=0
                        nMat=0
                        for nMat in range (len(listOfMaterials)):
                            effDensTemp=np.zeros([height,width,width])
                            if SumTotTomo[heightIndex,firstIndex,secondIndex]>minFluoSignal:
                                materialRatio[nMat]=materialsAnalysis[nMat].tomo[heightIndex,firstIndex,secondIndex]/SumTotTomo[heightIndex,firstIndex,secondIndex]
                            else:
                                materialRatio[nMat]=0
                            sum+=listOfMaterials[nMat].density* materialRatio[nMat]*listOfMaterials[nMat].myDictionary['Beam']
                        constant=0
                        try:
                            constant=-math.log(1-abs(npdataMerlin[heightIndex,firstIndex,secondIndex]))/(pixelSize*sum)                            
                        except:
                            constant=0     
                        for nMat in range (len(listOfMaterials)):
                            effDens[firstIndex,secondIndex,nMat]=constant*listOfMaterials[nMat].density*materialRatio[nMat]
                
                materialEffectiveDensity[heightIndex]=effDens
            MaterialCorrection=np.ones((len(listOfMaterials),nAngles,height,width,width))
            print 'doing correction'
            shift=projShift
            minimum=0.001
            maximum=0.05
            generalDensity=0
            xplot=np.linspace(0, width-1,width)
            for i in range(0,nAngles):
                print 'angle', i
                for k in range(height):
                    '''
                    rotating absorption
                    '''
                    M = cv2.getRotationMatrix2D((width/2,width/2),-i,1)
                    merlinSlice=npdataMerlin[k,:,:]
                    dst = cv2.warpAffine(merlinSlice,M,(width,width))
                    dstShifted=np.zeros((width,width))
                    if abs(shift)>0:
                        dstShifted[0:width-1-shift,:]=dst[shift:width-1,:]
                    else:
                        dstShifted=dst
                    binaryMask=np.zeros((width,width))
                    
                    MaterialSlice=[None]*len(listOfMaterials)
                    dstShiftedMaterial=[None]*len(listOfMaterials)
                    shiftedMaterialDensity=[None]*len(listOfMaterials)
                    binaryMaskMaterial=[None]*len(listOfMaterials)
                    '''
                    rotating fluorescence and density
                    '''
                    
                    for nMat in range(len(listOfMaterials)):

                        dstMaterial=cv2.warpAffine(materialsAnalysis[nMat].tomo[k,:,:],M,(width,width))

                        
                        binaryMaskMaterial[nMat]=np.zeros((width,width))

                        dstShiftedMaterial[nMat]=np.zeros((width,width))

                        '''
                        shift the rotated material
                        '''
                        shiftedMaterialDensity[nMat]=np.zeros([width,width])
                        if abs(shift)>0:
                            dstShiftedMaterial[nMat][0:width-1-shift,:]=dstMaterial[shift:width-1,:]
                            '''
                            shift material density
                            '''
                            shiftedMaterialDensity[nMat][0:width-1-shift,:]=cv2.warpAffine(materialEffectiveDensity[k][:,:,nMat],M,(width,width))[shift:width-1,:]
                        else:
                            dstShiftedMaterial[nMat]=dstMaterial
                            shiftedMaterialDensity[nMat]=cv2.warpAffine(materialEffectiveDensity[k][:,:,nMat],M,(width,width))

                        '''
                        shift material density
                        '''
                        shiftedMaterialDensity[nMat][0:width-1-shift,:]=cv2.warpAffine(materialEffectiveDensity[k][:,:,nMat],M,(width,width))[shift:width-1,:]

                    for kk in range(width):
                        for ll in range(width):
                            if (dstShifted[kk,ll]>minimum) and (dstShifted[kk,ll]<maximum):
                                binaryMask[kk,ll]=1
                            for nMat in range(len(listOfMaterials)):
                                if (dstShiftedMaterial[nMat][kk,ll]>minFluoSignal):
                                    binaryMaskMaterial[nMat][kk,ll]=1
                    plt.figure(3)
                    plt.imshow(binaryMask)
                    plt.figure(4)
                    plt.imshow(binaryMaskMaterial[1])

                    for j in range(0,width):

                        for ll in range(0,j-1):
                            '''
                            correction for absorption
                            '''
                            profll=binaryMask[ll,:]*binaryMask[j,:]
                            profllAbs=dstShifted[ll,:]*binaryMask[j,:]
                            profThick= np.sum(profll)# thickenss of the procile at j-1
                            profAbs= np.sum(profllAbs)
                            '''
                            correct the new mask for my mask
                            For Cu first and Pt then
                            '''
                            averageDensityMaterial=np.zeros(len(listOfMaterials))
                            for nMat in range(len(listOfMaterials)):

                                profllMaterial=binaryMask[ll,:]*binaryMaskMaterial[nMat][j,:]
                                correction=1
                                nMat2=0
                                for nMat2 in range(len(listOfMaterials)):

                                    profllDensMaterial=shiftedMaterialDensity[nMat2][ll,:]*binaryMaskMaterial[nMat][j,:]
                                    profThickMaterial= np.sum(profllMaterial)
                                    profDensMaterial=np.sum(profllDensMaterial)
                                    if profThickMaterial>0:
                                        averageDensityMaterial[nMat2]=profDensMaterial/profThickMaterial
                                    else:

                                        averageDensityMaterial[nMat2]=0
                                    correction=correction*math.exp(-averageDensityMaterial[nMat2]*listOfMaterials[nMat2].myDictionary[listOfMaterials[nMat].name]*pixelSize)
                                MaterialCorrection[nMat,i,k,j,ll]=correction

                        NewCorrectionMaterial=np.ones(len(listOfMaterials))

                        for lll in range(j):  
                            for nMat in range (len(listOfMaterials)):
                                 NewCorrectionMaterial[nMat]*=MaterialCorrection[nMat,i,k,j,lll] 
                        for nMat in range(len(listOfMaterials)):
                            NewMaterials[nMat][i,k,j]=materialsAnalysis[nMat].projection[i,k,j]/NewCorrectionMaterial[nMat]

            print 'all done, writing file for each material....'
            
            tomoNew=[None]*len(listOfMaterials)
            for nMat in range(len(listOfMaterials)):
                
                nameMat=outFold+"vortexProjections"+listOfMaterials[nMat].name+"0108.hdf"
                vortexImPt=h5py.File(nameMat,"w")
                dsetImagePt=vortexImPt.create_dataset('data', (nAngles,height,width), 'f')
                dsetImagePt[...]=NewMaterials[nMat]#/myMax
                vortexImPt.close()
                print 'nameMat'
                listOfMaterials[nMat].path=nameMat
                print 'processing the new tomography for', listOfMaterials[nMat].name, 'name',nameMat 
                tomoNew[nMat]=tomography(nameMat, 'data',tomoCentre, numAngle,angleRange)
                plt.figure(1)
                plt.imshow(materialsAnalysis[nMat].tomo[4,:,:])
        
                plt.figure(2)
                plt.imshow(tomoNew[nMat][4,:,:])
                #plt.show()
                materialsAnalysis[nMat].set_materialTomo(tomoNew[nMat])
                
                
            
        for nMat in range(len(listOfMaterials)):
            nameTomoMaterial=outFold+"vortexTomo"+listOfMaterials[nMat].name+".hdf"    
            vortexImPtCorr=h5py.File(nameTomoMaterial,"w")
            dsetImagePtCorr=vortexImPtCorr.create_dataset('data', (height,width,width), 'f')
            dsetImagePtCorr[...]=tomoNew[nMat]#/myMax
            vortexImPtCorr.close()

    	print 'all done, all closed'

      
def myRec(obj,continueLoop,pathTot,dataFolder):  
    ### recursive function to look for the data database
    temp=None
    i=1
    tempPath=''
    for name, value in obj.items():
        if continueLoop:
            #check if the object is a group
            if isinstance(obj[name], h5py.Group):
                tempPath='/'+name
                if len(obj[name])>0:
                    continueLoop,temp,tempPath= myRec(obj[name],continueLoop,tempPath,dataFolder)
                else:
                    continue
            else:
                test=obj[name]
                temp1='/'+dataFolder
                if temp1 in test.name:
                    continueLoop=False
                    tempPath=pathTot+'/'+name
                    return continueLoop,test.name,tempPath
            i=i+1
        if (i-1)>len(obj.items()):
            tempPath=''
    pathTot=pathTot+tempPath
    return continueLoop,temp, pathTot

def findIndexAbove(value,arr): 
	item2=0
	index2=len(arr)
	for index, item in enumerate(arr):
    		if item > value:
			if index<index2:
				index2=index
				item2=item
        return index2, item2
   

def findIndexBelow(value,arr):  
	item2=0
	index2=0
	for index, item in enumerate(arr):
    		if item < value:
			if index>index2:
				index2=index
				item2=item
	
        return index2, item2

def interpolateValue(lowX, loxY, highX, highY, wantedX): 
	wantedY=loxY+(wantedX-lowX)*(highY-loxY)/(highX-lowX)
	#print lowX, loxY, highX, highY, wantedX,wantedY
	#raw_input('interpolated values...')
	return wantedY


def loadParams(materialName,emissionLine,densityFile):
	print 'loading fluorescence parameters'
        with open(materialName) as json_data_file:
        	fluoData = json.load(json_data_file)
        	print fluoData["materials"]["name"][0],len(fluoData["materials"]["name"])
        	print 'output folder', fluoData["outputFolder"]["path"]
        	print 'absorption Path', fluoData["absorptionTomo"]["path"]

	print 'loading emission lines'
	with open(emissionLine) as json_dataLines_file:
		dataLines = json.load(json_dataLines_file)
	
	print 'loading densities'
	with open(densityFile) as json_density_file:
        	densities = json.load(json_density_file) 

	return fluoData,dataLines,densities

def createMaterials(fluoData,dataLines,densities):
	print 'creating list of materials...'
	listOfMaterials = []
	for i in range(len(fluoData["materials"]["name"])):
        	listOfMaterials.append(material(fluoData["materials"]["name"][i],densities["materials"][fluoData["materials"]["name"][i]]))
        	listOfMaterials[i].setPathToProjections(fluoData["materials"]["path"][i])
        	print listOfMaterials[i].name,listOfMaterials[i].density, listOfMaterials[i].pathToProjections
	return listOfMaterials

def loadMassAttCoeff(fluoData):
	massAttenuationCoefficientsFile=[]
    	for i in range(len(fluoData["materials"]["name"])):
		print fluoData["materials"]["name"][i]
		massAttenuationCoefficientsFile.append("/dls_sw/i13-1/scripts/Silvia/Fluorescence/dev/"+fluoData["materials"]["name"][i]+".dat")
		print massAttenuationCoefficientsFile[i]
		try:
    			absorption=np.loadtxt(massAttenuationCoefficientsFile[i], skiprows=1)
			print np.shape(absorption)
		except:
			print 'mass attenuation coefficent file for ',data["materials"]["name"][i] ,'not found'
	return massAttenuationCoefficientsFile

def setMatAbsCoef(data,massAttenuationCoefficientsFile,dataLines,listOfMaterials):
	for i in range(len(data["materials"]["name"])):
            for j in range(len(data["materials"]["name"])):
		try:
    			absorption=np.loadtxt(massAttenuationCoefficientsFile[i], skiprows=1)
			print 'setting up mass absorption coefficient of ', listOfMaterials[i].name, " for the energy ", dataLines["materials"][listOfMaterials[j].name]
			energyLine=float(dataLines["materials"][listOfMaterials[j].name])
			indexAbove,itemAbove=findIndexAbove(energyLine,absorption[:,0]*1000)
			indexBelow,itemBelow=findIndexBelow(energyLine,absorption[:,0]*1000)
			absorptionCoef=interpolateValue(itemBelow, absorption[indexBelow,1], itemAbove, absorption[indexAbove,1], energyLine)
                	listOfMaterials[i].myDictionary[listOfMaterials[j].name]=absorptionCoef
			print absorptionCoef, 'interpolated value'
		except:
			print 'mass attenuation coefficent file for ',data["materials"]["name"][i] ,'not found'
	    energyLine=float(dataLines["materials"]["Beam"])
	    indexAbove,itemAbove=findIndexAbove(energyLine,absorption[:,0]*1000)
	    indexBelow,itemBelow=findIndexBelow(energyLine,absorption[:,0]*1000)
	    absorptionCoef=interpolateValue(itemBelow, absorption[indexBelow,1], itemAbove, absorption[indexAbove,1], energyLine)
            listOfMaterials[i].myDictionary["Beam"]=absorptionCoef
            print  'here'
            print listOfMaterials[i].myDictionary


#########For testing function
if __name__ == "__main__":

    # load material list with density, projection files, absorption file and output file
    materialName="/dls/i13-1/data/2020/mg23919-1/processing/fluoParam297293.json"
    emissionLine="/dls_sw/i13-1/scripts/fluorescence/elementsEmissionLines.json"
    densityFile="/dls_sw/i13-1/scripts/Silvia/Fluorescence/dev/densities.json"


    fluoData,dataLines,densities=loadParams(materialName,emissionLine,densityFile)
    listOfMaterials=createMaterials(fluoData,dataLines,densities)
    massAttenuationCoefficientsFile=loadMassAttCoeff(fluoData)
    setMatAbsCoef(fluoData,massAttenuationCoefficientsFile,dataLines,listOfMaterials)
    raw_input('mass a[bsorption coefficents set...')
    print 'outside setting functions...'
    for i in range(len(fluoData["materials"]["name"])):
	print listOfMaterials[i].myDictionary
	print listOfMaterials[i].name
    raw_input('Im outside...')

    width=40
    height=30
    depthProjections=40
    tomoCentre=4#19 for sample 2
    minFluoSignal=0.001
    projShift=0
    numAngles=16
    angleRange=180
    roi=[0,0,3,3]#for normalization	
    pixelSize=0.25e-4
    nxsfileName=fluoData["absorptionTomo"]["path"]
    absTomo=absTomography(nxsfileName,'data',tomoCentre,numAngles,angleRange,roi)
    print 'absorption tomo reconstructed'
    #nameMerlinTomo=fluoData["absorptionTomo"]["path"]#"/dls/i13-1/data/2017/mt16702-1/processing/Excalibur/PCOTomosample2.hdf"
    outputFolder=fluoData["outputFolder"]["path"]
   
    #print nameMerlinTomo ,'nameMerlinTomo'
    AttenuationCorrection(listOfMaterials,outputFolder, absTomo,'data',tomoCentre, minFluoSignal, projShift,numAngles,angleRange,pixelSize)
